{"version":3,"sources":["component/ActorCard/ActorCard.js","model/ActorModel.js","pages/ActorsPage/ActorsPage.js","component/MovieCard/MovieCard.js","component/SearchBox/SearchBox.js","model/MovieModel.js","pages/MoviePage/MoviePage.js","App.js","reportWebVitals.js","index.js"],"names":["ActorCard","actor","Col","xs","md","lg","Card","className","Img","variant","src","image","Body","Title","href","link","target","firstName","lastName","Text","getAge","ActorModel","birthday","this","today","Date","birthDate","age","getFullYear","m","getMonth","getDate","ActorsPage","params","actorsFiltered","sortedFilter","useState","actors","setActors","filterText","setFilterText","sortBy","setSortBy","useEffect","axios","get","process","concat","then","response","data","map","aSort","a","b","filter","toLowerCase","includes","sort","Container","Form","FormControl","type","value","onChange","e","placeholder","as","Row","Spinner","animation","MovieCard","movie","poster","movieName","length","director","mainStars","SearchBox","searchText","onSearchChange","results","onResultSelected","Control","ListGroup","result","index","Item","action","onClick","MovieModel","MoviePage","props","movies","setMovies","setSearchText","setResults","setNewResults","newSearchText","searchURL","title","resultIndex","movieId","id","moviePoster","poster_path","movieTimeURL","movieTime","runtime","movieDetailsURL","crew","name","actor1","cast","actor2","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f38b63c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Col } from 'react-bootstrap';\r\nimport './ActorCard.css';\r\n\r\nfunction ActorCard({actor}) {\r\n    return (       \r\n        <Col xs={12} md={6} lg={3}>              \r\n                <Card className=\"class-card\">\r\n                    <Card.Img variant=\"top\" src={actor.image} />\r\n                    <Card.Body className=\"body\">\r\n                        <Card.Title className=\"fixName\">\r\n                            <a href={actor.link} target=\"_blank\">\r\n                                {`${actor.firstName}  ${actor.lastName}`}\r\n                            </a>\r\n                            </Card.Title>                            \r\n                        <Card.Text>\r\n                       {actor.getAge()}\r\n                        </Card.Text>                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        \r\n    );\r\n}\r\n\r\nexport default ActorCard;","class ActorModel {\r\n    \r\n    constructor(firstName, lastName,birthday, image,link) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthday = birthday;\r\n        this.image = image;\r\n        this.link = link;\r\n    }\r\n\r\n    getAge() {       \r\n            var today = new Date();\r\n            var birthDate = new Date(this.birthday);\r\n            var age = today.getFullYear() - birthDate.getFullYear();\r\n            var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age--;\r\n            }\r\n            return age;\r\n        }\r\n  \r\n}\r\n\r\nexport default ActorModel;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActorCard from '../../component/ActorCard/ActorCard';\r\nimport ActorModel from '../../model/ActorModel';\r\nimport { Container, Row ,Spinner, Form ,FormControl } from 'react-bootstrap';\r\nimport NavBar from '../../component/NavBar/NavBar';\r\nimport './ActorsPage.css';\r\n\r\n\r\nfunction ActorsPage(params) {   \r\n    const [actors, setActors] = useState(\"\");\r\n    const [filterText, setFilterText] = useState(\"\");\r\n    const [sortBy, setSortBy]= useState(\"firstName\");\r\n\r\n    useEffect( () => {\r\n        const pathPre = process.env.PUBLIC_URL; \r\n        axios.get(pathPre.concat(\"/actors.json\")).then( response => {\r\n            setActors(response.data.map( actor => new ActorModel(actor.firstName, actor.lastName,\r\n                                        actor.birthday , actor.image, actor.link) ));\r\n        });\r\n       } , [] );\r\n     \r\n   \r\n       let actorsFiltered;\r\n       let sortedFilter;\r\n       if (actors)  {\r\n            actorsFiltered = actors.filter( (actor) => actor.firstName.toLowerCase().includes(filterText.toLowerCase()) || \r\n                                            actor.lastName.toLowerCase().includes(filterText.toLowerCase()));\r\n            \r\n            sortedFilter = \"\";\r\n\r\n            if (sortBy === \"firstName\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => aSort(a.firstName.toLowerCase(),b.firstName.toLowerCase()));        \r\n            } else  if (sortBy === \"lastName\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => aSort(a.lastName.toLowerCase(),b.lastName.toLowerCase()));        \r\n            } else if(sortBy === \"age\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => a.getAge() - b.getAge() );        \r\n            }\r\n                \r\n            function aSort(a, b) {\r\n                if (a < b) {\r\n                    return -1;\r\n                }\r\n                if (a > b) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            };\r\n        }\r\n    // if(filterText !== \"\"){\r\n    //     actorRows = actorsFiltered.map(actor => <ActorCard actor={actor} />)\r\n    // } else {\r\n    //     actorRows = sortedFilter.map(actor => <ActorCard actor={actor} />)\r\n    // }    \r\n\r\n    return (\r\n      \r\n       <Container className=\"class-container\">\r\n            <h1> Actor Gallery</h1>        \r\n                <Form className=\"row filter\"> \r\n                <div className=\"col-lg-8 col-md-8 col-12 \" >                    \r\n                    <FormControl type=\"text\" \r\n                        value={filterText} onChange={(e) => setFilterText(e.target.value)} \r\n                        placeholder=\"Filter by a first or Last name\"\r\n                        />\r\n                </div>                    \r\n                <div className=\"col-lg-4 col-md-4 col-12\">\r\n                    <FormControl as=\"select\" value={sortBy} onChange={(e) => setSortBy(e.target.value)} >\r\n                        <option value=\"firstName\">First Name</option>\r\n                        <option value=\"lastName\">Last Name</option>\r\n                        <option value=\"age\">age</option>\r\n                    </FormControl>\r\n                </div>                 \r\n                </Form>           \r\n             <Row>\r\n                { actors ?\r\n                 \r\n                 sortedFilter.map(actor => <ActorCard actor={actor} />)\r\n                    :\r\n                    <Spinner animation=\"border\"/>   \r\n                }               \r\n            </Row>\r\n        </Container>\r\n        );\r\n    \r\n}\r\n\r\nexport default ActorsPage;","import React from 'react';\r\nimport { Card, Col } from 'react-bootstrap';\r\nimport './MovieCard.css';\r\n\r\nfunction MovieCard({movie}) {\r\n    return (       \r\n        <Col xs={12} md={6} lg={3}>              \r\n                <Card className=\"class-movie\">\r\n                <Card.Img variant=\"top\" src={movie.poster} />                 \r\n                    <Card.Body className=\"body\">\r\n                        <Card.Title className=\"fixName\">\r\n                           {movie.movieName}                        \r\n                            </Card.Title>                            \r\n                        <Card.Text>\r\n                       <span>Movie length: {movie.length}</span>     \r\n                       <span>Director:  {movie.director}</span>\r\n                       <span> Main actors: {movie.mainStars}</span>\r\n                        </Card.Text>                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        \r\n    );\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport { Form, ListGroup } from 'react-bootstrap';\r\nimport './SearchBox.css'\r\n\r\n\r\nfunction SearchBox({placeholder, searchText, onSearchChange, results, onResultSelected}) {\r\n    return (\r\n        <div className=\"c-searchbox\">\r\n            <Form.Control type=\"text\" placeholder={placeholder} value={searchText} \r\n                onChange={e => onSearchChange(e.target.value)}/>\r\n            <ListGroup className=\"result-box\">\r\n                {results.map((result, index) => \r\n                    <ListGroup.Item action onClick={() => onResultSelected(index)}>\r\n                        {result}\r\n                    </ListGroup.Item>)}\r\n            </ListGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","class MovieModel {\r\n    \r\n    constructor(movieName, length, poster, director, mainStars) {      \r\n        this.movieName = movieName;\r\n        this.length = length;\r\n        this.poster = poster;\r\n        this.director = director;\r\n        this.mainStars = mainStars;\r\n    }    \r\n}\r\n\r\nexport default MovieModel;","import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport MovieCard from '../../component/MovieCard/MovieCard';\r\nimport SearchBox from '../../component/SearchBox/SearchBox';\r\nimport MovieModel from '../../model/MovieModel';\r\nimport './MoviePage.css';\r\n\r\nfunction MoviePage(props) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [newResults, setNewResults] = useState([]);\r\n\r\n    function handleSearchChange(newSearchText) {\r\n        setSearchText(newSearchText);\r\n\r\n        if (newSearchText) {\r\n            // Here we should call TMDB\r\n\r\n            const searchURL = \"https://api.themoviedb.org/3/search/movie?api_key=4e214b891886fcf04facf7c227f3a489&page=1&include_adult=false&query=\" + newSearchText;\r\n            axios.get(searchURL).then(response => {\r\n                setResults(response.data.results);\r\n            });           \r\n        } else {\r\n            setResults([]);\r\n        }\r\n    }\r\n\r\n    function addMovie(resultIndex) {\r\n        // Adding the actor to the view        \r\n        \r\n        const movieId = results[resultIndex].id;\r\n        const movieName= results[resultIndex].title;\r\n        // const length = results[resultIndex].runtime;\r\n        const moviePoster = \"https://image.tmdb.org/t/p/w500/\" + results[resultIndex].poster_path;\r\n\r\n        const movieTimeURL = \"https://api.themoviedb.org/3/movie/\" + movieId +\"?api_key=4e214b891886fcf04facf7c227f3a489&page=1&include_adult=false\" ; \r\n        let movieTime = \"\";\r\n        axios.get(movieTimeURL).then(response => {\r\n            movieTime= response.data.runtime + \" min \";\r\n        });           \r\n        \r\n\r\n        const movieDetailsURL = \"https://api.themoviedb.org/3/movie/\" + movieId +\"/credits?api_key=4e214b891886fcf04facf7c227f3a489&page=1&include_adult=false\" ; \r\n\r\n        axios.get(movieDetailsURL).then(response => {\r\n            // console.log(response.data.cast[0]);         \r\n            // console.log(response.data.crew[0]);\r\n            const director = response.data.crew[0].name;\r\n            const actors = \" \";\r\n            const actor1 = response.data.cast[0].name;\r\n            const actor2 = response.data.cast[1].name;\r\n            setNewResults(response.data.results);\r\n            setMovies(movies.concat(\r\n                            new MovieModel(movieName,\r\n                                           movieTime,\r\n                                           moviePoster,\r\n                                           director,\r\n                                           (actors.concat(actor1 + \" and \" +actor2))                  \r\n                                        )));\r\n                });\r\n           \r\n        // Cleaning up the SearchBox\r\n        setResults([]);\r\n        setSearchText(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-actors\">\r\n            <Container>            \r\n            <h1> Search a Movie</h1>        \r\n                <SearchBox\r\n                    placeholder=\"Search a Movie...\" \r\n                    searchText={searchText} \r\n                    onSearchChange={handleSearchChange}\r\n                    results={results.map(result => result.title)}\r\n                    onResultSelected={addMovie}/>\r\n                <Row>\r\n                    {movies.map(movie => <MovieCard movie={movie}/>)}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}    \r\n\r\nexport default MoviePage;","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport ActorsPage from './pages/ActorsPage/ActorsPage';\nimport MoviePage from './pages/MoviePage/MoviePage';\n\nfunction App() {\n  return (\n    <Container>\n      <div className=\"p-cars\">\n        <ActorsPage/>\n      </div>\n      <div className=\"p-cars\">\n        <MoviePage/>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}