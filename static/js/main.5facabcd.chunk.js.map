{"version":3,"sources":["component/ActorCard/ActorCard.js","model/ActorModel.js","pages/ActorsPage/ActorsPage.js","App.js","reportWebVitals.js","index.js"],"names":["ActorCard","actor","Col","xs","md","lg","Card","className","Img","variant","src","image","Body","Title","href","link","target","firstName","lastName","Text","getAge","ActorModel","birthday","this","today","Date","birthDate","age","getFullYear","m","getMonth","getDate","ActorsPage","params","actorsFiltered","sortedFilter","useState","actors","setActors","filterText","setFilterText","sortBy","setSortBy","useEffect","axios","get","process","concat","then","response","data","map","aSort","a","b","filter","toLowerCase","includes","sort","Container","Form","FormControl","type","value","onChange","e","placeholder","as","Row","Spinner","animation","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5facabcd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Col } from 'react-bootstrap';\r\nimport './ActorCard.css';\r\n\r\nfunction ActorCard({actor}) {\r\n    return (       \r\n        <Col xs={12} md={6} lg={3}>              \r\n                <Card className=\"class-card\">\r\n                    <Card.Img variant=\"top\" src={actor.image} />\r\n                    <Card.Body className=\"body\">\r\n                        <Card.Title className=\"fixName\">\r\n                            <a href={actor.link} target=\"_blank\">\r\n                                {`${actor.firstName}  ${actor.lastName}`}\r\n                            </a>\r\n                            </Card.Title>                            \r\n                        <Card.Text>\r\n                       {actor.getAge()}\r\n                        </Card.Text>                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        \r\n    );\r\n}\r\n\r\nexport default ActorCard;","class ActorModel {\r\n    \r\n    constructor(firstName, lastName,birthday, image,link) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthday = birthday;\r\n        this.image = image;\r\n        this.link = link;\r\n    }\r\n\r\n    getAge() {       \r\n            var today = new Date();\r\n            var birthDate = new Date(this.birthday);\r\n            var age = today.getFullYear() - birthDate.getFullYear();\r\n            var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age--;\r\n            }\r\n            return age;\r\n        }\r\n  \r\n}\r\n\r\nexport default ActorModel;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActorCard from '../../component/ActorCard/ActorCard';\r\nimport ActorModel from '../../model/ActorModel';\r\nimport { Container, Row ,Spinner, Form ,FormControl } from 'react-bootstrap';\r\nimport NavBar from '../../component/NavBar/NavBar';\r\nimport './ActorsPage.css';\r\n\r\n\r\nfunction ActorsPage(params) {   \r\n    const [actors, setActors] = useState(\"\");\r\n    const [filterText, setFilterText] = useState(\"\");\r\n    const [sortBy, setSortBy]= useState(\"firstName\");\r\n\r\n    useEffect( () => {\r\n        const pathPre = process.env.PUBLIC_URL; \r\n        axios.get(pathPre.concat(\"/actors.json\")).then( response => {\r\n            setActors(response.data.map( actor => new ActorModel(actor.firstName, actor.lastName,\r\n                                        actor.birthday , actor.image, actor.link) ));\r\n        });\r\n       } , [] );\r\n     \r\n   \r\n       let actorsFiltered;\r\n       let sortedFilter;\r\n       if (actors)  {\r\n            actorsFiltered = actors.filter( (actor) => actor.firstName.toLowerCase().includes(filterText.toLowerCase()) || \r\n                                            actor.lastName.toLowerCase().includes(filterText.toLowerCase()));\r\n            \r\n            sortedFilter = \"\";\r\n\r\n            if (sortBy === \"firstName\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => aSort(a.firstName.toLowerCase(),b.firstName.toLowerCase()));        \r\n            } else  if (sortBy === \"lastName\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => aSort(a.lastName.toLowerCase(),b.lastName.toLowerCase()));        \r\n            } else if(sortBy === \"age\"){\r\n                sortedFilter = actorsFiltered.sort( (a,b) => a.getAge() - b.getAge() );        \r\n            }\r\n                \r\n            function aSort(a, b) {\r\n                if (a < b) {\r\n                    return -1;\r\n                }\r\n                if (a > b) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            };\r\n        }\r\n    // if(filterText !== \"\"){\r\n    //     actorRows = actorsFiltered.map(actor => <ActorCard actor={actor} />)\r\n    // } else {\r\n    //     actorRows = sortedFilter.map(actor => <ActorCard actor={actor} />)\r\n    // }    \r\n\r\n    return (\r\n      \r\n       <Container className=\"class-container\">\r\n            <h1> Actor Gallery</h1>        \r\n                <Form className=\"row filter\"> \r\n                <div className=\"col-lg-8 col-md-8 col-12 \" >                    \r\n                    <FormControl type=\"text\" \r\n                        value={filterText} onChange={(e) => setFilterText(e.target.value)} \r\n                        placeholder=\"Filter by a first or Last name\"\r\n                        />\r\n                </div>                    \r\n                <div className=\"col-lg-4 col-md-4 col-12\">\r\n                    <FormControl as=\"select\" value={sortBy} onChange={(e) => setSortBy(e.target.value)} >\r\n                        <option value=\"firstName\">First Name</option>\r\n                        <option value=\"lastName\">Last Name</option>\r\n                        <option value=\"age\">age</option>\r\n                    </FormControl>\r\n                </div>                 \r\n                </Form>           \r\n             <Row>\r\n                { actors ?\r\n                 \r\n                 sortedFilter.map(actor => <ActorCard actor={actor} />)\r\n                    :\r\n                    <Spinner animation=\"border\"/>   \r\n                }               \r\n            </Row>\r\n        </Container>\r\n        );\r\n    \r\n}\r\n\r\nexport default ActorsPage;","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport ActorsPage from './pages/ActorsPage/ActorsPage';\n\nfunction App() {\n  return (\n    <Container>\n      <div className=\"p-cars\">\n        <ActorsPage/>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}